From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Timothy Southwick <NickNackGus@gmail.com>
Date: Sat, 10 Jul 2021 20:08:03 -0400
Subject: [PATCH] Monumenta - Mob spawning and behavior changes

- Dolphins no longer have biome restrictions
- Wither skeletons no longer attack piglins
- Drowned no longer convert naturally
- Charged creepers no longer cause mob head drops
- Skeletons attack wolves instead of running from them
- Iron golems no longer automatically attack monsters
- Drowned no longer have biome restrictions
- Ocelots spawn on any block
- Ocelots, golems, phantoms, bees, dolphins, hoglins no longer spawn in peaceful from spawners
- Allow wolves to spawn from spawners on any block when not in peaceful
- Always allow slimes to spawn from spawners
- Squid spawn from spawners regardless of sea level
- All animals now can spawn from spawners regardless of light level so long as they are spawning in air above a non-air non-water block
- Polar bears now use EntityAnimal spawn restrictions
- Disable boss evokers summoning vexes / fangs
- Skeletons can only shoot bows from main hand
- Remove wither nether star drop
- Giant AI
- Increase Giant view distance
- Endermen holding items are no longer always persistent

Signed-off-by: Byron Marohn <combustible@live.com>

diff --git a/src/main/java/net/minecraft/world/entity/animal/Animal.java b/src/main/java/net/minecraft/world/entity/animal/Animal.java
index 5a503a255b4e7e684a8f42d8190430397ca81683..fe6a8f5bac5908aabd6c301dc3a37d0ab4379c0d 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Animal.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Animal.java
@@ -90,7 +90,7 @@ public abstract class Animal extends AgeableMob {
 
     @Override
     public float getWalkTargetValue(BlockPos pos, LevelReader world) {
-        return world.getBlockState(pos.below()).is(Blocks.GRASS_BLOCK) ? 10.0F : world.getBrightness(pos) - 0.5F;
+        return super.getWalkTargetValue(pos, world); // Monumenta - use the default from EntityCreature with no grass block check
     }
 
     @Override
@@ -116,6 +116,19 @@ public abstract class Animal extends AgeableMob {
     }
 
     public static boolean checkAnimalSpawnRules(EntityType<? extends Animal> type, LevelAccessor world, MobSpawnType spawnReason, BlockPos pos, Random random) {
+        // MONUMENTA START
+        if (spawnReason == MobSpawnType.SPAWNER) {
+            // Mob from a spawner
+            if (world.getDifficulty() == net.minecraft.world.Difficulty.PEACEFUL && // Not peaceful
+                !world.getBlockState(pos.below()).is(Blocks.AIR) && // Not above air
+                !world.getFluidState(pos.below()).is(net.minecraft.tags.FluidTags.WATER) && // Not above water
+                world.getBlockState(pos).is(Blocks.AIR)) { // Must be in air
+                return true;
+            }
+            // Disallow spawning from spawners otherwise, even if the default requirements are met
+            return false;
+        }
+        // MONUMENTA END
         return world.getBlockState(pos.below()).is(Blocks.GRASS_BLOCK) && world.getRawBrightness(pos, 0) > 8;
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/animal/Bee.java b/src/main/java/net/minecraft/world/entity/animal/Bee.java
index 2639f64f1a50faddc0284fb26b73b563b3e9eba9..c488f095d33f8cb8e3de5dc2947b1e90f154137c 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Bee.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Bee.java
@@ -43,6 +43,7 @@ import net.minecraft.world.entity.EntityDimensions;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.Mob;
+import net.minecraft.world.entity.MobSpawnType;
 import net.minecraft.world.entity.MobType;
 import net.minecraft.world.entity.NeutralMob;
 import net.minecraft.world.entity.PathfinderMob;
@@ -73,6 +74,7 @@ import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.crafting.Ingredient;
 import net.minecraft.world.level.Level;
+import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.world.level.LevelReader;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.Blocks;
@@ -632,6 +634,11 @@ public class Bee extends Animal implements NeutralMob, FlyingAnimal {
         return this.isBaby() ? dimensions.height * 0.5F : dimensions.height * 0.5F;
     }
 
+    @Override
+    public boolean checkSpawnRules(LevelAccessor world, MobSpawnType spawnReason) {
+        return super.checkSpawnRules(world, spawnReason) && (this.level.getDifficulty() == Difficulty.PEACEFUL || spawnReason == MobSpawnType.SPAWNER);
+    }
+
     @Override
     public boolean causeFallDamage(float fallDistance, float damageMultiplier, DamageSource damageSource) {
         return false;
diff --git a/src/main/java/net/minecraft/world/entity/animal/Dolphin.java b/src/main/java/net/minecraft/world/entity/animal/Dolphin.java
index f3093815066e6881a2bb638ae4643f69374450b3..5d4c784b87fcf8a26f456d3355b0176bdaf0a370 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Dolphin.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Dolphin.java
@@ -24,6 +24,7 @@ import net.minecraft.tags.FluidTags;
 import net.minecraft.tags.ItemTags;
 import net.minecraft.tags.Tag;
 import net.minecraft.util.Mth;
+import net.minecraft.world.Difficulty;
 import net.minecraft.world.DifficultyInstance;
 import net.minecraft.world.InteractionHand;
 import net.minecraft.world.InteractionResult;
@@ -100,6 +101,11 @@ public class Dolphin extends WaterAnimal {
         return super.finalizeSpawn(world, difficulty, spawnReason, entityData, entityNbt);
     }
 
+    @Override
+    public boolean checkSpawnRules(LevelAccessor world, MobSpawnType spawnReason) {
+        return super.checkSpawnRules(world, spawnReason) && (this.level.getDifficulty() == Difficulty.PEACEFUL || spawnReason == MobSpawnType.SPAWNER);
+    }
+
     @Override
     public boolean canBreatheUnderwater() {
         return false;
@@ -341,7 +347,7 @@ public class Dolphin extends WaterAnimal {
         if (pos.getY() > 45 && pos.getY() < world.getSeaLevel()) {
             Optional<ResourceKey<Biome>> optional = world.getBiomeName(pos);
 
-            return (!Objects.equals(optional, Optional.of(Biomes.OCEAN)) || !Objects.equals(optional, Optional.of(Biomes.DEEP_OCEAN))) && world.getFluidState(pos).is((Tag) FluidTags.WATER);
+            return world.getFluidState(pos).is((Tag) FluidTags.WATER);
         } else {
             return false;
         }
diff --git a/src/main/java/net/minecraft/world/entity/animal/IronGolem.java b/src/main/java/net/minecraft/world/entity/animal/IronGolem.java
index ec00c2dd8f969eb99ec6a014e3bcd09c7484b237..0dfb299fa78565e3997b1386c8601b80a0186046 100644
--- a/src/main/java/net/minecraft/world/entity/animal/IronGolem.java
+++ b/src/main/java/net/minecraft/world/entity/animal/IronGolem.java
@@ -79,12 +79,8 @@ public class IronGolem extends AbstractGolem implements NeutralMob {
         this.goalSelector.addGoal(5, new OfferFlowerGoal(this));
         this.goalSelector.addGoal(7, new LookAtPlayerGoal(this, Player.class, 6.0F));
         this.goalSelector.addGoal(8, new RandomLookAroundGoal(this));
-        this.targetSelector.addGoal(1, new DefendVillageTargetGoal(this));
         this.targetSelector.addGoal(2, new HurtByTargetGoal(this, new Class[0]));
         this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<>(this, Player.class, 10, true, false, this::isAngryAt));
-        this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<>(this, Mob.class, 5, false, false, (entityliving) -> {
-            return entityliving instanceof Enemy && !(entityliving instanceof Creeper);
-        }));
         this.targetSelector.addGoal(4, new ResetUniversalAngerTargetGoal<>(this, false));
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/animal/Ocelot.java b/src/main/java/net/minecraft/world/entity/animal/Ocelot.java
index 06bf44ceb6f959a99f268fe1e1dca494985fbf4e..a7bb5f64462ca5c14642b61c3e4fdd30705c41ee 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Ocelot.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Ocelot.java
@@ -16,6 +16,7 @@ import net.minecraft.sounds.SoundEvent;
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.tags.BlockTags;
 import net.minecraft.tags.Tag;
+import net.minecraft.world.Difficulty;
 import net.minecraft.world.DifficultyInstance;
 import net.minecraft.world.InteractionHand;
 import net.minecraft.world.InteractionResult;
@@ -251,7 +252,7 @@ public class Ocelot extends Animal {
     }
 
     public static boolean checkOcelotSpawnRules(EntityType<Ocelot> type, LevelAccessor world, MobSpawnType spawnReason, BlockPos pos, Random random) {
-        return random.nextInt(3) != 0;
+        return world.getDifficulty() != Difficulty.PEACEFUL;
     }
 
     @Override
@@ -259,13 +260,9 @@ public class Ocelot extends Animal {
         if (world.isUnobstructed((Entity) this) && !world.containsAnyLiquid(this.getBoundingBox())) {
             BlockPos blockposition = this.blockPosition();
 
-            if (blockposition.getY() < world.getSeaLevel()) {
-                return false;
-            }
-
             BlockState iblockdata = world.getBlockState(blockposition.below());
 
-            if (iblockdata.is(Blocks.GRASS_BLOCK) || iblockdata.is((Tag) BlockTags.LEAVES)) {
+            if (!iblockdata.is(Blocks.AIR)) {
                 return true;
             }
         }
@@ -288,6 +285,11 @@ public class Ocelot extends Animal {
         return new Vec3(0.0D, (double) (0.5F * this.getEyeHeight()), (double) (this.getBbWidth() * 0.4F));
     }
 
+    @Override
+    public boolean checkSpawnRules(LevelAccessor world, MobSpawnType spawnReason) {
+        return super.checkSpawnRules(world, spawnReason) && (this.level.getDifficulty() == Difficulty.PEACEFUL || spawnReason == MobSpawnType.SPAWNER);
+    }
+
     @Override
     public boolean isSteppingCarefully() {
         return this.getPose() == Pose.CROUCHING || super.isSteppingCarefully();
diff --git a/src/main/java/net/minecraft/world/entity/animal/PolarBear.java b/src/main/java/net/minecraft/world/entity/animal/PolarBear.java
index 0694cd0b994ee595adca43c988485e6dc13c7244..c5e31d408cb15b3996914f670182fb51629d4909 100644
--- a/src/main/java/net/minecraft/world/entity/animal/PolarBear.java
+++ b/src/main/java/net/minecraft/world/entity/animal/PolarBear.java
@@ -99,11 +99,7 @@ public class PolarBear extends Animal implements NeutralMob {
 
     public static boolean checkPolarBearSpawnRules(EntityType<PolarBear> type, LevelAccessor world, MobSpawnType spawnReason, BlockPos pos, Random random) {
         Optional<ResourceKey<Biome>> optional = world.getBiomeName(pos);
-        if (!Objects.equals(optional, Optional.of(Biomes.FROZEN_OCEAN)) && !Objects.equals(optional, Optional.of(Biomes.DEEP_FROZEN_OCEAN))) {
-            return checkAnimalSpawnRules(type, world, spawnReason, pos, random);
-        } else {
-            return world.getRawBrightness(pos, 0) > 8 && world.getBlockState(pos.below()).is(Blocks.ICE);
-        }
+        return checkAnimalSpawnRules(type, world, spawnReason, pos, random);
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/animal/SnowGolem.java b/src/main/java/net/minecraft/world/entity/animal/SnowGolem.java
index 2631f08496c8e45874b22760b559a91b7b2bf415..5721e3b13d10e3832f282fc13bd6577f2fd5430d 100644
--- a/src/main/java/net/minecraft/world/entity/animal/SnowGolem.java
+++ b/src/main/java/net/minecraft/world/entity/animal/SnowGolem.java
@@ -10,6 +10,7 @@ import net.minecraft.sounds.SoundEvent;
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.sounds.SoundSource;
 import net.minecraft.util.Mth;
+import net.minecraft.world.Difficulty;
 import net.minecraft.world.InteractionHand;
 import net.minecraft.world.InteractionResult;
 import net.minecraft.world.damagesource.DamageSource;
@@ -18,6 +19,7 @@ import net.minecraft.world.entity.EntityDimensions;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.Mob;
+import net.minecraft.world.entity.MobSpawnType;
 import net.minecraft.world.entity.Pose;
 import net.minecraft.world.entity.Shearable;
 import net.minecraft.world.entity.ai.attributes.AttributeSupplier;
@@ -35,6 +37,7 @@ import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.level.GameRules;
 import net.minecraft.world.level.Level;
+import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.gameevent.GameEvent;
@@ -145,6 +148,11 @@ public class SnowGolem extends AbstractGolem implements Shearable, RangedAttackM
         return 1.7F;
     }
 
+    @Override
+    public boolean checkSpawnRules(LevelAccessor world, MobSpawnType spawnReason) {
+        return super.checkSpawnRules(world, spawnReason) && (this.level.getDifficulty() == Difficulty.PEACEFUL || spawnReason == MobSpawnType.SPAWNER);
+    }
+
     @Override
     protected InteractionResult mobInteract(Player player, InteractionHand hand) {
         ItemStack itemstack = player.getItemInHand(hand);
diff --git a/src/main/java/net/minecraft/world/entity/animal/Squid.java b/src/main/java/net/minecraft/world/entity/animal/Squid.java
index 56838c9f214c0f75041e75c45ad1a0c72fcacc66..f8c7bffabb6f57114bc0e17fbbaf7499c6168f7b 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Squid.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Squid.java
@@ -211,6 +211,11 @@ public class Squid extends WaterAnimal {
     }
 
     public static boolean checkSquidSpawnRules(EntityType<Squid> type, LevelAccessor world, MobSpawnType spawnReason, BlockPos pos, Random random) {
+        // MONUMENTA START
+        if (spawnReason == MobSpawnType.SPAWNER) {
+            return world.getDifficulty() != net.minecraft.world.Difficulty.PEACEFUL && world.getFluidState(pos).is(net.minecraft.tags.FluidTags.WATER);
+        }
+        // MONUMENTA END
         final double maxHeight = world.getMinecraftWorld().paperConfig.squidMaxSpawnHeight > 0 ? world.getMinecraftWorld().paperConfig.squidMaxSpawnHeight : world.getSeaLevel(); // Paper
         return pos.getY() > world.getMinecraftWorld().spigotConfig.squidSpawnRangeMin && pos.getY() < maxHeight; // Spigot // Paper
     }
diff --git a/src/main/java/net/minecraft/world/entity/animal/Wolf.java b/src/main/java/net/minecraft/world/entity/animal/Wolf.java
index 80caabee4d2100208f117a1c3e35247b65e318ad..ffc4486b97f7d18ce76055e1725608368b6fb376 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Wolf.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Wolf.java
@@ -15,6 +15,7 @@ import net.minecraft.sounds.SoundEvents;
 import net.minecraft.util.Mth;
 import net.minecraft.util.TimeUtil;
 import net.minecraft.util.valueproviders.UniformInt;
+import net.minecraft.world.Difficulty;
 import net.minecraft.world.InteractionHand;
 import net.minecraft.world.InteractionResult;
 import net.minecraft.world.damagesource.DamageSource;
@@ -24,6 +25,7 @@ import net.minecraft.world.entity.EntityDimensions;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.Mob;
+import net.minecraft.world.entity.MobSpawnType;
 import net.minecraft.world.entity.NeutralMob;
 import net.minecraft.world.entity.Pose;
 import net.minecraft.world.entity.TamableAnimal;
@@ -59,6 +61,7 @@ import net.minecraft.world.item.Item;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.level.Level;
+import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.gameevent.GameEvent;
 import net.minecraft.world.phys.Vec3;
@@ -297,6 +300,19 @@ public class Wolf extends TamableAnimal implements NeutralMob {
         return dimensions.height * 0.8F;
     }
 
+    @Override
+    public boolean checkSpawnRules(LevelAccessor world, MobSpawnType spawnReason) {
+        if (this.level.getDifficulty() == Difficulty.PEACEFUL) {
+            return false;
+        } else if (spawnReason == MobSpawnType.SPAWNER) {
+            // Spawner, allow spawning on any non-air block regardless of light
+            return !this.level.getBlockState(this.blockPosition().below()).isAir();
+        } else {
+            // Non-spawner, use default spawning rules
+            return super.checkSpawnRules(world, spawnReason);
+        }
+    }
+
     @Override
     public int getMaxHeadXRot() {
         return this.isInSittingPose() ? 20 : super.getMaxHeadXRot();
diff --git a/src/main/java/net/minecraft/world/entity/boss/wither/WitherBoss.java b/src/main/java/net/minecraft/world/entity/boss/wither/WitherBoss.java
index 6e3bd5146c687922e7b4680d59a1ae2d1480ad40..067a5286d012c76a09862b962cf89e9b63e5a2f1 100644
--- a/src/main/java/net/minecraft/world/entity/boss/wither/WitherBoss.java
+++ b/src/main/java/net/minecraft/world/entity/boss/wither/WitherBoss.java
@@ -522,17 +522,6 @@ public class WitherBoss extends Monster implements PowerableMob, RangedAttackMob
         }
     }
 
-    @Override
-    protected void dropCustomDeathLoot(DamageSource source, int lootingMultiplier, boolean allowDrops) {
-        super.dropCustomDeathLoot(source, lootingMultiplier, allowDrops);
-        ItemEntity entityitem = this.spawnAtLocation((ItemLike) Items.NETHER_STAR);
-
-        if (entityitem != null) {
-            entityitem.setExtendedLifetime();
-        }
-
-    }
-
     @Override
     public void checkDespawn() {
         if (this.level.getDifficulty() == Difficulty.PEACEFUL && this.shouldDespawnInPeaceful()) {
diff --git a/src/main/java/net/minecraft/world/entity/monster/AbstractSkeleton.java b/src/main/java/net/minecraft/world/entity/monster/AbstractSkeleton.java
index cd75f895b6818fbb7ed4b0ef3df873f264bb2d1b..4d441fd71236fd015104174885d2348bc861774b 100644
--- a/src/main/java/net/minecraft/world/entity/monster/AbstractSkeleton.java
+++ b/src/main/java/net/minecraft/world/entity/monster/AbstractSkeleton.java
@@ -71,13 +71,12 @@ public abstract class AbstractSkeleton extends Monster implements RangedAttackMo
     protected void registerGoals() {
         this.goalSelector.addGoal(2, new RestrictSunGoal(this));
         this.goalSelector.addGoal(3, new FleeSunGoal(this, 1.0D));
-        this.goalSelector.addGoal(3, new AvoidEntityGoal<>(this, Wolf.class, 6.0F, 1.0D, 1.2D));
         this.goalSelector.addGoal(5, new WaterAvoidingRandomStrollGoal(this, 1.0D));
         this.goalSelector.addGoal(6, new LookAtPlayerGoal(this, Player.class, 8.0F));
         this.goalSelector.addGoal(6, new RandomLookAroundGoal(this));
         this.targetSelector.addGoal(1, new HurtByTargetGoal(this, new Class[0]));
         this.targetSelector.addGoal(2, new NearestAttackableTargetGoal<>(this, Player.class, true));
-        this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<>(this, IronGolem.class, true));
+        this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<>(this, Wolf.class, true));
         this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<>(this, Turtle.class, 10, true, false, Turtle.BABY_ON_LAND_SELECTOR));
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/monster/Creeper.java b/src/main/java/net/minecraft/world/entity/monster/Creeper.java
index e8c36e8541f041a0d72a86f49ced2a3ce1549be0..55199b2bccdd56d122841738ec967e24f75f65d8 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Creeper.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Creeper.java
@@ -324,7 +324,7 @@ public class Creeper extends Monster implements PowerableMob {
     }
 
     public boolean canDropMobsSkull() {
-        return this.isPowered() && this.droppedSkulls < 1;
+        return false;
     }
 
     public void increaseDroppedSkulls() {
diff --git a/src/main/java/net/minecraft/world/entity/monster/Drowned.java b/src/main/java/net/minecraft/world/entity/monster/Drowned.java
index 50228e59d629e75e97d23bd3ec92088f75480827..7488145778811a52d58e2bd4eab9b267ad72a20f 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Drowned.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Drowned.java
@@ -80,7 +80,6 @@ public class Drowned extends Zombie implements RangedAttackMob {
         this.targetSelector.addGoal(1, (new HurtByTargetGoal(this, Drowned.class)).setAlertOthers(ZombifiedPiglin.class));
         this.targetSelector.addGoal(2, new NearestAttackableTargetGoal<>(this, Player.class, 10, true, false, this::okTarget));
         if (this.level.spigotConfig.zombieAggressiveTowardsVillager) this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<>(this, AbstractVillager.class, false)); // Paper
-        this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<>(this, IronGolem.class, true));
         this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<>(this, Axolotl.class, true, false));
         this.targetSelector.addGoal(5, new NearestAttackableTargetGoal<>(this, Turtle.class, 10, true, false, Turtle.BABY_ON_LAND_SELECTOR));
     }
@@ -99,11 +98,7 @@ public class Drowned extends Zombie implements RangedAttackMob {
     public static boolean checkDrownedSpawnRules(EntityType<Drowned> type, ServerLevelAccessor world, MobSpawnType spawnReason, BlockPos pos, Random random) {
         Optional<ResourceKey<Biome>> optional = world.getBiomeName(pos);
         boolean bl = world.getDifficulty() != Difficulty.PEACEFUL && isDarkEnoughToSpawn(world, pos, random) && (spawnReason == MobSpawnType.SPAWNER || world.getFluidState(pos).is(FluidTags.WATER));
-        if (!Objects.equals(optional, Optional.of(Biomes.RIVER)) && !Objects.equals(optional, Optional.of(Biomes.FROZEN_RIVER))) {
-            return random.nextInt(40) == 0 && isDeepEnoughToSpawn(world, pos) && bl;
-        } else {
-            return random.nextInt(15) == 0 && bl;
-        }
+        return (spawnReason == MobSpawnType.SPAWNER || random.nextInt(15) == 0) && bl;
     }
 
     private static boolean isDeepEnoughToSpawn(LevelAccessor world, BlockPos pos) {
diff --git a/src/main/java/net/minecraft/world/entity/monster/EnderMan.java b/src/main/java/net/minecraft/world/entity/monster/EnderMan.java
index e1e220b3e4967590a2a77370e2a6ab919ad50eaa..b1435156a20d0db3c6547b3004b972043f52f855 100644
--- a/src/main/java/net/minecraft/world/entity/monster/EnderMan.java
+++ b/src/main/java/net/minecraft/world/entity/monster/EnderMan.java
@@ -408,7 +408,7 @@ public class EnderMan extends Monster implements NeutralMob {
 
     @Override
     public boolean requiresCustomPersistence() {
-        return super.requiresCustomPersistence() || this.getCarriedBlock() != null;
+        return super.requiresCustomPersistence(); // MONUMENTA - ignore carrying item
     }
 
     private static class EndermanFreezeWhenLookedAt extends Goal {
diff --git a/src/main/java/net/minecraft/world/entity/monster/Evoker.java b/src/main/java/net/minecraft/world/entity/monster/Evoker.java
index 4b812fc118126040d773f87ab50047cbbda79d1c..d6de202a5c5dd1ccc3de816b1b0f2e4032ac8d6f 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Evoker.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Evoker.java
@@ -61,7 +61,6 @@ public class Evoker extends SpellcasterIllager {
         this.targetSelector.addGoal(1, (new HurtByTargetGoal(this, Raider.class)).setAlertOthers());
         this.targetSelector.addGoal(2, (new NearestAttackableTargetGoal<>(this, Player.class, true)).setUnseenMemoryTicks(300));
         this.targetSelector.addGoal(3, (new NearestAttackableTargetGoal<>(this, AbstractVillager.class, false)).setUnseenMemoryTicks(300));
-        this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<>(this, IronGolem.class, false));
     }
 
     public static AttributeSupplier.Builder createAttributes() {
@@ -144,6 +143,14 @@ public class Evoker extends SpellcasterIllager {
     }
 
     class EvokerAttackSpellGoal extends SpellcasterIllager.SpellcasterUseSpellGoal {
+        @Override
+        public boolean canUse() {
+            if (getTags().contains("boss_evoker_no_fangs")) { // Monumenta - Disable boss evokers summoning fangs
+                return false;
+            }
+            return super.canUse();
+        }
+
         @Override
         protected int getCastingTime() {
             return 40;
@@ -238,7 +245,7 @@ public class Evoker extends SpellcasterIllager {
 
         @Override
         public boolean canUse() {
-            if (!super.canUse()) {
+            if (!super.canUse() || getTags().contains("boss_evoker_no_vex")) { // Monumenta - Disable boss evokers summoning vexes
                 return false;
             } else {
                 int i = Evoker.this.level.getNearbyEntities(Vex.class, this.vexCountTargeting, Evoker.this, Evoker.this.getBoundingBox().inflate(16.0D)).size();
diff --git a/src/main/java/net/minecraft/world/entity/monster/Giant.java b/src/main/java/net/minecraft/world/entity/monster/Giant.java
index 0d578ab12c874bd2daccc4322a3fe1abafa4bc18..e56c75c3e65e01a96f12648e0f3cc315653f9c7d 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Giant.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Giant.java
@@ -1,13 +1,25 @@
 package net.minecraft.world.entity.monster;
 
 import net.minecraft.core.BlockPos;
+import net.minecraft.sounds.SoundEvent;
+import net.minecraft.sounds.SoundEvents;
+import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.entity.EntityDimensions;
 import net.minecraft.world.entity.EntityType;
+import net.minecraft.world.entity.MobType;
 import net.minecraft.world.entity.Pose;
 import net.minecraft.world.entity.ai.attributes.AttributeSupplier;
 import net.minecraft.world.entity.ai.attributes.Attributes;
+import net.minecraft.world.entity.ai.goal.LookAtPlayerGoal;
+import net.minecraft.world.entity.ai.goal.MeleeAttackGoal;
+import net.minecraft.world.entity.ai.goal.RandomLookAroundGoal;
+import net.minecraft.world.entity.ai.goal.WaterAvoidingRandomStrollGoal;
+import net.minecraft.world.entity.ai.goal.target.HurtByTargetGoal;
+import net.minecraft.world.entity.ai.goal.target.NearestAttackableTargetGoal;
+import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.LevelReader;
+import net.minecraft.world.level.block.state.BlockState;
 
 public class Giant extends Monster {
     public Giant(EntityType<? extends Giant> type, Level world) {
@@ -27,4 +39,49 @@ public class Giant extends Monster {
     public float getWalkTargetValue(BlockPos pos, LevelReader world) {
         return world.getBrightness(pos) - 0.5F;
     }
+
+    @Override
+    protected void registerGoals() {
+        this.goalSelector.addGoal(8, new LookAtPlayerGoal(this, Player.class, 8.0F));
+        this.goalSelector.addGoal(8, new RandomLookAroundGoal(this));
+        this.goalSelector.addGoal(7, new WaterAvoidingRandomStrollGoal(this, 1.0D));
+        this.goalSelector.addGoal(2, new MeleeAttackGoal(this, 1.0D, false));
+
+        this.targetSelector.addGoal(1, (new HurtByTargetGoal(this, new Class[0])).setAlertOthers(ZombifiedPiglin.class));
+        this.targetSelector.addGoal(2, new NearestAttackableTargetGoal<>(this, Player.class, true));
+    }
+
+    @Override
+    protected SoundEvent getAmbientSound() {
+        return SoundEvents.ZOMBIE_AMBIENT;
+    }
+
+    @Override
+    public float getVoicePitch() {
+        return 0.3F;
+    }
+
+    @Override
+    protected SoundEvent getHurtSound(DamageSource source) {
+        return SoundEvents.ZOMBIE_HURT;
+    }
+
+    @Override
+    protected SoundEvent getDeathSound() {
+        return SoundEvents.ZOMBIE_DEATH;
+    }
+
+    protected SoundEvent getStepSound() {
+        return SoundEvents.ZOMBIE_STEP;
+    }
+
+    @Override
+    protected void playStepSound(BlockPos pos, BlockState state) {
+        this.playSound(this.getStepSound(), 0.15F, 0.3F);
+    }
+
+    @Override
+    public MobType getMobType() {
+        return MobType.UNDEAD;
+    }
 }
diff --git a/src/main/java/net/minecraft/world/entity/monster/Illusioner.java b/src/main/java/net/minecraft/world/entity/monster/Illusioner.java
index c9fa01b910de7ecb494d3000afebea9a2bd1276a..40e579ba8e8199e9251af2a0218d9fd6d27c81ea 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Illusioner.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Illusioner.java
@@ -73,7 +73,6 @@ public class Illusioner extends SpellcasterIllager implements RangedAttackMob {
         this.targetSelector.addGoal(1, (new HurtByTargetGoal(this, new Class[]{Raider.class})).setAlertOthers(new Class[0])); // CraftBukkit - decompile error
         this.targetSelector.addGoal(2, (new NearestAttackableTargetGoal<>(this, Player.class, true)).setUnseenMemoryTicks(300));
         this.targetSelector.addGoal(3, (new NearestAttackableTargetGoal<>(this, AbstractVillager.class, false)).setUnseenMemoryTicks(300));
-        this.targetSelector.addGoal(3, (new NearestAttackableTargetGoal<>(this, IronGolem.class, false)).setUnseenMemoryTicks(300));
     }
 
     public static AttributeSupplier.Builder createAttributes() {
diff --git a/src/main/java/net/minecraft/world/entity/monster/Phantom.java b/src/main/java/net/minecraft/world/entity/monster/Phantom.java
index 39291a0cea465613733a905141b584f05e597b4c..de667935b5e9bb77445e81b4cfa98b2144b70839 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Phantom.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Phantom.java
@@ -16,6 +16,7 @@ import net.minecraft.sounds.SoundEvent;
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.sounds.SoundSource;
 import net.minecraft.util.Mth;
+import net.minecraft.world.Difficulty;
 import net.minecraft.world.DifficultyInstance;
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.entity.Entity;
@@ -38,6 +39,7 @@ import net.minecraft.world.entity.ai.targeting.TargetingConditions;
 import net.minecraft.world.entity.animal.Cat;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.level.Level;
+import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.world.level.ServerLevelAccessor;
 import net.minecraft.world.level.levelgen.Heightmap;
 import net.minecraft.world.phys.Vec3;
@@ -103,6 +105,11 @@ public class Phantom extends FlyingMob implements Enemy {
         return dimensions.height * 0.35F;
     }
 
+    @Override
+    public boolean checkSpawnRules(LevelAccessor world, MobSpawnType spawnReason) {
+        return super.checkSpawnRules(world, spawnReason) && (this.level.getDifficulty() == Difficulty.PEACEFUL || spawnReason == MobSpawnType.SPAWNER);
+    }
+
     @Override
     public void onSyncedDataUpdated(EntityDataAccessor<?> data) {
         if (Phantom.ID_SIZE.equals(data)) {
diff --git a/src/main/java/net/minecraft/world/entity/monster/Pillager.java b/src/main/java/net/minecraft/world/entity/monster/Pillager.java
index c0de613024de7b9b55f96be37e4648e83dea9b8f..924a2b7e60758fad91bd28d0dfd162e2fff6638d 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Pillager.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Pillager.java
@@ -78,7 +78,6 @@ public class Pillager extends AbstractIllager implements CrossbowAttackMob, Inve
         this.targetSelector.addGoal(1, (new HurtByTargetGoal(this, new Class[]{Raider.class})).setAlertOthers(new Class[0])); // CraftBukkit - decompile error
         this.targetSelector.addGoal(2, new NearestAttackableTargetGoal<>(this, Player.class, true));
         this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<>(this, AbstractVillager.class, false));
-        this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<>(this, IronGolem.class, true));
     }
 
     public static AttributeSupplier.Builder createAttributes() {
diff --git a/src/main/java/net/minecraft/world/entity/monster/Ravager.java b/src/main/java/net/minecraft/world/entity/monster/Ravager.java
index 4f51de49757a912ec84ccf5dab087c9a3e11a60e..e57de2bd49a5724810e127fbf802db7b2bc91661 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Ravager.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Ravager.java
@@ -81,7 +81,6 @@ public class Ravager extends Raider {
         this.targetSelector.addGoal(2, (new HurtByTargetGoal(this, new Class[]{Raider.class})).setAlertOthers(new Class[0])); // CraftBukkit - decompile error
         this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<>(this, Player.class, true));
         this.targetSelector.addGoal(4, new NearestAttackableTargetGoal<>(this, AbstractVillager.class, true));
-        this.targetSelector.addGoal(4, new NearestAttackableTargetGoal<>(this, IronGolem.class, true));
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/monster/Slime.java b/src/main/java/net/minecraft/world/entity/monster/Slime.java
index e1a593b464c35f68b22e84a09f99ee72af73da32..955c6c9e9d5da220f4b5159c8c8d38b4d31b9603 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Slime.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Slime.java
@@ -82,7 +82,6 @@ public class Slime extends Mob implements Enemy {
         this.targetSelector.addGoal(1, new NearestAttackableTargetGoal<>(this, Player.class, 10, true, false, (entityliving) -> {
             return Math.abs(entityliving.getY() - this.getY()) <= 4.0D;
         }));
-        this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<>(this, IronGolem.class, true));
     }
 
     @Override
@@ -326,6 +325,10 @@ public class Slime extends Mob implements Enemy {
 
     public static boolean checkSlimeSpawnRules(EntityType<Slime> type, LevelAccessor world, MobSpawnType spawnReason, BlockPos pos, Random random) {
         if (world.getDifficulty() != Difficulty.PEACEFUL) {
+            if (spawnReason == MobSpawnType.SPAWNER) {
+                return true;
+            }
+
             if (Objects.equals(world.getBiomeName(pos), Optional.of(Biomes.SWAMP)) && pos.getY() > 50 && pos.getY() < 70 && random.nextFloat() < 0.5F && random.nextFloat() < world.getMoonBrightness() && world.getMaxLocalRawBrightness(pos) <= random.nextInt(8)) {
                 return checkMobSpawnRules(type, world, spawnReason, pos, random);
             }
diff --git a/src/main/java/net/minecraft/world/entity/monster/Vindicator.java b/src/main/java/net/minecraft/world/entity/monster/Vindicator.java
index 51082fb81477b96c778796e8daf288b366cecf22..e0a96d3d851a011c3ea8e69338e6cc99167dd1cd 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Vindicator.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Vindicator.java
@@ -68,7 +68,6 @@ public class Vindicator extends AbstractIllager {
         this.targetSelector.addGoal(1, (new HurtByTargetGoal(this, Raider.class)).setAlertOthers());
         this.targetSelector.addGoal(2, new NearestAttackableTargetGoal<>(this, Player.class, true));
         this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<>(this, AbstractVillager.class, true));
-        this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<>(this, IronGolem.class, true));
         this.targetSelector.addGoal(4, new Vindicator.VindicatorJohnnyAttackGoal(this));
         this.goalSelector.addGoal(8, new RandomStrollGoal(this, 0.6D));
         this.goalSelector.addGoal(9, new LookAtPlayerGoal(this, Player.class, 3.0F, 1.0F));
diff --git a/src/main/java/net/minecraft/world/entity/monster/WitherSkeleton.java b/src/main/java/net/minecraft/world/entity/monster/WitherSkeleton.java
index 033d6389e4b7d986fc63abd67e325b68a6132824..0372a3eef01c59013f6208fc0ae1210e9c6adb7b 100644
--- a/src/main/java/net/minecraft/world/entity/monster/WitherSkeleton.java
+++ b/src/main/java/net/minecraft/world/entity/monster/WitherSkeleton.java
@@ -36,7 +36,6 @@ public class WitherSkeleton extends AbstractSkeleton {
 
     @Override
     protected void registerGoals() {
-        this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<>(this, AbstractPiglin.class, true));
         super.registerGoals();
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/monster/Zombie.java b/src/main/java/net/minecraft/world/entity/monster/Zombie.java
index ddda5d1e85864030db0cfecbf7a5fe134d7013a1..e9f8293a1c9d89e29da167edffb9897a4d04eb05 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Zombie.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Zombie.java
@@ -122,7 +122,6 @@ public class Zombie extends Monster {
         this.targetSelector.addGoal(1, (new HurtByTargetGoal(this, new Class[0])).setAlertOthers(ZombifiedPiglin.class));
         this.targetSelector.addGoal(2, new NearestAttackableTargetGoal<>(this, Player.class, true));
         if ( level.spigotConfig.zombieAggressiveTowardsVillager ) this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<>(this, AbstractVillager.class, false)); // Spigot
-        this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<>(this, IronGolem.class, true));
         this.targetSelector.addGoal(5, new NearestAttackableTargetGoal<>(this, Turtle.class, 10, true, false, Turtle.BABY_ON_LAND_SELECTOR));
     }
 
@@ -223,10 +222,6 @@ public class Zombie extends Monster {
             } else if (this.convertsInWater()) {
                 if (this.isEyeInFluid((Tag) FluidTags.WATER)) {
                     ++this.inWaterTime;
-                    if (this.inWaterTime >= 600) {
-                        this.startUnderWaterConversion(300);
-                        this.lastTick = MinecraftServer.currentTick; // Paper - Make sure this is set at start of process - GH-1887
-                    }
                 } else {
                     this.inWaterTime = -1;
                 }
diff --git a/src/main/java/net/minecraft/world/entity/monster/hoglin/Hoglin.java b/src/main/java/net/minecraft/world/entity/monster/hoglin/Hoglin.java
index c510da19883d1aa79b2fc25e2d9c8f5cd8dd7bfa..4885464b4b90d3b25240cb93708c3f07557a73a5 100644
--- a/src/main/java/net/minecraft/world/entity/monster/hoglin/Hoglin.java
+++ b/src/main/java/net/minecraft/world/entity/monster/hoglin/Hoglin.java
@@ -14,6 +14,7 @@ import net.minecraft.server.level.ServerLevel;
 import net.minecraft.sounds.SoundEvent;
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.sounds.SoundSource;
+import net.minecraft.world.Difficulty;
 import net.minecraft.world.DifficultyInstance;
 import net.minecraft.world.InteractionHand;
 import net.minecraft.world.InteractionResult;
@@ -123,7 +124,12 @@ public class Hoglin extends Animal implements Enemy, HoglinBase {
 
     @Override
     public Brain<Hoglin> getBrain() {
-        return super.getBrain();
+        return (Brain<Hoglin>) super.getBrain();
+    }
+
+    @Override
+    public boolean checkSpawnRules(LevelAccessor world, MobSpawnType spawnReason) {
+        return super.checkSpawnRules(world, spawnReason) && (this.level.getDifficulty() == Difficulty.PEACEFUL || spawnReason == MobSpawnType.SPAWNER);
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/projectile/ProjectileUtil.java b/src/main/java/net/minecraft/world/entity/projectile/ProjectileUtil.java
index 54054890e36cf3811d1154e2df9cf9af19ec68aa..33ef50d5003cf56ede40a8bcf49d0eb65029c9bb 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/ProjectileUtil.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/ProjectileUtil.java
@@ -128,6 +128,7 @@ public final class ProjectileUtil {
     }
 
     public static InteractionHand getWeaponHoldingHand(LivingEntity entity, Item item) {
+        if (Items.BOW == item) return InteractionHand.MAIN_HAND; // MONUMENTA - Only allow mobs to use bows from mainhand
         return entity.getMainHandItem().is(item) ? InteractionHand.MAIN_HAND : InteractionHand.OFF_HAND;
     }
 
diff --git a/src/main/java/org/spigotmc/TrackingRange.java b/src/main/java/org/spigotmc/TrackingRange.java
index e5bcbfe175a697e04886d04543e1278b7e83a184..ac486dd191efd75ab21552e45d0aac9fe30cbf86 100644
--- a/src/main/java/org/spigotmc/TrackingRange.java
+++ b/src/main/java/org/spigotmc/TrackingRange.java
@@ -25,6 +25,7 @@ public class TrackingRange
             return defaultRange;
         }
         if (entity instanceof net.minecraft.world.entity.boss.enderdragon.EnderDragon) return defaultRange; // Paper - enderdragon is exempt
+        if (entity instanceof net.minecraft.world.entity.monster.Giant) return 96; // Monumenta - Giants are visible from further away
         SpigotWorldConfig config = entity.level.spigotConfig;
         if ( entity instanceof ServerPlayer )
         {
